pojo(plain old java object),意思是“普通的旧的java对象”
无特定继承
无特定接口（Serialization接口是可选的，除非有需要进行序列化的场景）
属性是私有的，通过公共的getter和setter方法进行访问
无业务逻辑

在开发中的作用：
1.数据传输对象，POJO类通常用于表示和传输数据。例如，在web开发中，POJO可以作为HTTP请求和响应的数据对象
2.持久化对象。在ORM（如Hibernate或Mybatis）框架中，POJO类通常与数据库表一一对应，作为实体类（Entity）进行持久化。
3.简化开发


VO（Value Object） POJO和VO类似，但VO更侧重数据的不可变性，通常只有getter方法，没有setter方法，数据在创建时就被赋
值，后续不可修改。

DTO（data transfer object） ： DTO用于传输数据。POJO只是一个基础的数据容器，而DTO通常是跨层，跨服务传输数据的对象。
特点：
1.简化数据传输：DTO主要用于数据封装，使得复杂的数据结构能够以简洁的方式在网络,API或应用层之间传递。
2.没有业务逻辑
3.跨层传输数据：DTO主要用于不同层之间的数据传输，尤其是在控制层，服务层，持久层之间。例如，将服务层的数据传递给控制层，
或者从控制层传毒给前端 
4.解耦：DTO有助于解耦系统的各个模块。例如，控制层通过DTO与服务层交互，前端通过DTO接收数据，后端通过DTO与数据库交互，
这样可以避免各层之间传播过于复杂的对象模型。

DTO的应用场景：
1.web开发
2.服务间通信
3.持久化和应用层的解耦


DAO（data access object），数据访问对象。
DAO是一种设计模式，用于抽象化和封装应用程序中对数据源（通常是数据库）的访问。DAO层的主要职责是提供对数据库或
其他持久化存储的操作接口。它通常用于隔离业务层和持久层，使得数据库的具体实现对业务层是透明的。
特点：
1.封装数据库操作
2.抽象化数据存储：DAO层提供了一个抽象的接口，使得应用程序可以轻松切换数据库或存储机制（例如从MySQL切换
到MongoDB）
3.不包含任何业务逻辑

组成：
1.DAO接口
2.DAO实现